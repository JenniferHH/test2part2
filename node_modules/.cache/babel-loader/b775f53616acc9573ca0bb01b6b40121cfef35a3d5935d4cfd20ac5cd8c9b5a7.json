{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\bank\\\\banking-app-hsw\\\\src\\\\DataLake.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataLake = () => {\n  _s();\n  const [result, setResult] = useState(null);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const url = 'https://json-storage-api.p.rapidapi.com/datalake';\n    const options = {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json',\n        'X-RapidAPI-Key': '66d105c179msh9c5b82c1cf62460p15aa72jsn63c558e1dc1e',\n        'X-RapidAPI-Host': 'json-storage-api.p.rapidapi.com'\n      },\n      body: JSON.stringify({\n        '@context': ['http://schema4i.org/Thing.jsonld', 'http://schema4i.org/Action.jsonld', 'http://schema4i.org/CreateAction.jsonld'],\n        '@type': 'CreateAction',\n        Result: {\n          '@context': ['http://schema4i.org/DataLakeItem.jsonld', 'http://schema4i.org/UserAccount.jsonld', 'http://schema4i.org/OfferForPurchase.jsonld', 'http://schema4i.org/Offer.jsonld', 'http://schema4i.org/Organization.jsonld', 'http://schema4i.org/PostalAddress.jsonld'],\n          '@type': 'DataLakeItem',\n          Name: 'X-PLOR Group',\n          Creator: {\n            '@type': 'UserAccount',\n            Identifier: 'USERID-4711'\n          },\n          About: {\n            '@type': 'Organization',\n            Name: 'X-PLOR GmbH',\n            Address: {\n              '@type': 'PostalAddress',\n              StreetAddress: 'Lindenstrasse',\n              HouseNumber: '48-52',\n              PostalCode: '40233',\n              AddressLocality: 'Duesseldorf',\n              AddressCountry: 'D'\n            }\n          }\n        }\n      })\n    };\n    const fetchData = async () => {\n      try {\n        const response = await fetch(url, options);\n        const result = await response.text();\n        setResult(result);\n      } catch (error) {\n        setError(error);\n        console.error(error);\n      }\n    };\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Data Lake Response\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }, this), result ? /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: result\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 39\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n_s(DataLake, \"r5R2G8TP6ze4vseVY1FnQT8s6TM=\");\n_c = DataLake;\nexport default DataLake;\nvar _c;\n$RefreshReg$(_c, \"DataLake\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","DataLake","_s","result","setResult","error","setError","url","options","method","headers","body","JSON","stringify","Result","Name","Creator","Identifier","About","Address","StreetAddress","HouseNumber","PostalCode","AddressLocality","AddressCountry","fetchData","response","fetch","text","console","children","fileName","_jsxFileName","lineNumber","columnNumber","message","_c","$RefreshReg$"],"sources":["C:/Users/USER/bank/banking-app-hsw/src/DataLake.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nconst DataLake = () => {\r\n  const [result, setResult] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const url = 'https://json-storage-api.p.rapidapi.com/datalake';\r\n    const options = {\r\n      method: 'POST',\r\n      headers: {\r\n        'content-type': 'application/json',\r\n        'X-RapidAPI-Key': '66d105c179msh9c5b82c1cf62460p15aa72jsn63c558e1dc1e',\r\n        'X-RapidAPI-Host': 'json-storage-api.p.rapidapi.com'\r\n      },\r\n      body: JSON.stringify({\r\n        '@context': [\r\n          'http://schema4i.org/Thing.jsonld',\r\n          'http://schema4i.org/Action.jsonld',\r\n          'http://schema4i.org/CreateAction.jsonld'\r\n        ],\r\n        '@type': 'CreateAction',\r\n        Result: {\r\n          '@context': [\r\n            'http://schema4i.org/DataLakeItem.jsonld',\r\n            'http://schema4i.org/UserAccount.jsonld',\r\n            'http://schema4i.org/OfferForPurchase.jsonld',\r\n            'http://schema4i.org/Offer.jsonld',\r\n            'http://schema4i.org/Organization.jsonld',\r\n            'http://schema4i.org/PostalAddress.jsonld'\r\n          ],\r\n          '@type': 'DataLakeItem',\r\n          Name: 'X-PLOR Group',\r\n          Creator: {\r\n            '@type': 'UserAccount',\r\n            Identifier: 'USERID-4711'\r\n          },\r\n          About: {\r\n            '@type': 'Organization',\r\n            Name: 'X-PLOR GmbH',\r\n            Address: {\r\n              '@type': 'PostalAddress',\r\n              StreetAddress: 'Lindenstrasse',\r\n              HouseNumber: '48-52',\r\n              PostalCode: '40233',\r\n              AddressLocality: 'Duesseldorf',\r\n              AddressCountry: 'D'\r\n            }\r\n          }\r\n        }\r\n      })\r\n    };\r\n\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(url, options);\r\n        const result = await response.text();\r\n        setResult(result);\r\n      } catch (error) {\r\n        setError(error);\r\n        console.error(error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Data Lake Response</h1>\r\n      {error && <p>Error: {error.message}</p>}\r\n      {result ? <pre>{result}</pre> : <p>Loading...</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DataLake;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAExCD,SAAS,CAAC,MAAM;IACd,MAAMU,GAAG,GAAG,kDAAkD;IAC9D,MAAMC,OAAO,GAAG;MACdC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,gBAAgB,EAAE,oDAAoD;QACtE,iBAAiB,EAAE;MACrB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnB,UAAU,EAAE,CACV,kCAAkC,EAClC,mCAAmC,EACnC,yCAAyC,CAC1C;QACD,OAAO,EAAE,cAAc;QACvBC,MAAM,EAAE;UACN,UAAU,EAAE,CACV,yCAAyC,EACzC,wCAAwC,EACxC,6CAA6C,EAC7C,kCAAkC,EAClC,yCAAyC,EACzC,0CAA0C,CAC3C;UACD,OAAO,EAAE,cAAc;UACvBC,IAAI,EAAE,cAAc;UACpBC,OAAO,EAAE;YACP,OAAO,EAAE,aAAa;YACtBC,UAAU,EAAE;UACd,CAAC;UACDC,KAAK,EAAE;YACL,OAAO,EAAE,cAAc;YACvBH,IAAI,EAAE,aAAa;YACnBI,OAAO,EAAE;cACP,OAAO,EAAE,eAAe;cACxBC,aAAa,EAAE,eAAe;cAC9BC,WAAW,EAAE,OAAO;cACpBC,UAAU,EAAE,OAAO;cACnBC,eAAe,EAAE,aAAa;cAC9BC,cAAc,EAAE;YAClB;UACF;QACF;MACF,CAAC;IACH,CAAC;IAED,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACpB,GAAG,EAAEC,OAAO,CAAC;QAC1C,MAAML,MAAM,GAAG,MAAMuB,QAAQ,CAACE,IAAI,CAAC,CAAC;QACpCxB,SAAS,CAACD,MAAM,CAAC;MACnB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,QAAQ,CAACD,KAAK,CAAC;QACfwB,OAAO,CAACxB,KAAK,CAACA,KAAK,CAAC;MACtB;IACF,CAAC;IAEDoB,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEzB,OAAA;IAAA8B,QAAA,gBACE9B,OAAA;MAAA8B,QAAA,EAAI;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAC1B7B,KAAK,iBAAIL,OAAA;MAAA8B,QAAA,GAAG,SAAO,EAACzB,KAAK,CAAC8B,OAAO;IAAA;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACtC/B,MAAM,gBAAGH,OAAA;MAAA8B,QAAA,EAAM3B;IAAM;MAAA4B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,gBAAGlC,OAAA;MAAA8B,QAAA,EAAG;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9C,CAAC;AAEV,CAAC;AAAChC,EAAA,CAxEID,QAAQ;AAAAmC,EAAA,GAARnC,QAAQ;AA0Ed,eAAeA,QAAQ;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}