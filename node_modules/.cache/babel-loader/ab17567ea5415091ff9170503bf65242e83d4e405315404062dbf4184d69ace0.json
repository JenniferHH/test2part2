{"ast":null,"code":"import React,{useState,useEffect}from'react';import'./tran.css';import Table from'react-bootstrap/Table';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const url='https://json-storage-api.p.rapidapi.com/datalake';const headers={'Content-Type':'application/json','X-RapidAPI-Key':'66d105c179msh9c5b82c1cf62460p15aa72jsn63c558e1dc1e','X-RapidAPI-Host':'json-storage-api.p.rapidapi.com'};const accountNumber=localStorage.getItem('accountNumber');const accountId='USERID-4711'+accountNumber;function Transaction(){const[amount,setAmount]=useState(0);const[balance,setBalance]=useState(0);const[transactions,setTransactions]=useState([]);const[errorMessage,setErrorMessage]=useState('');const storeTransaction=async transaction=>{try{const response=await fetch(url,{method:'POST',headers,body:JSON.stringify({'@context':['http://schema4i.org/Thing.jsonld','http://schema4i.org/Action.jsonld','http://schema4i.org/CreateAction.jsonld'],'@type':'CreateAction',Result:{'@context':['http://schema4i.org/DataLakeItem.jsonld','http://schema4i.org/UserAccount.jsonld','http://schema4i.org/OfferForPurchase.jsonld','http://schema4i.org/Offer.jsonld','http://schema4i.org/Organization.jsonld','http://schema4i.org/PostalAddress.jsonld'],'@type':'DataLakeItem',Name:'Transaction',Creator:{'@type':'UserAccount',Identifier:accountId},About:{'@type':'Organization'},Amount:transaction.amount,Balance:transaction.balance,Type:transaction.type,SerialNumber:transaction.serial}})});const data=await response.json();console.log(data);loadTransactions();}catch(error){console.error('Error storing transaction:',error);}};const loadTransactions=async()=>{try{const response=await fetch(url,{method:'POST',headers,body:JSON.stringify({'@context':['http://schema4i.org/Thing.jsonld','http://schema4i.org/Action.jsonld','http://schema4i.org/SearchAction.jsonld'],'@type':'SearchAction',Object:{'@context':['http://schema4i.org/Thing.jsonld','http://schema4i.org/Filter','http://schema4i.org/DataLakeItem','http://schema4i.org/UserAccount'],'@type':'Filter',FilterItem:{'@type':'DataLakeItem',Creator:{'@type':'UserAccount',Identifier:accountId}}}})});const data=await response.json();const result=data.Result.ItemListElement.map(item=>item.Item);result.sort((a,b)=>a.SerialNumber-b.SerialNumber);setTransactions(result);if(result.length>0){const latestBalance=result[result.length-1].Balance;setBalance(latestBalance);if(latestBalance<0){setErrorMessage('Insufficient balance for withdrawal');}else{setErrorMessage('');}}}catch(error){console.error('Error loading transactions:',error);}};const clearTransactions=async()=>{try{const response=await fetch(url,{method:'POST',headers,body:JSON.stringify({'@context':['http://schema4i.org/Thing.jsonld','http://schema4i.org/Action.jsonld','http://schema4i.org/DeleteAction.jsonld'],'@type':'DeleteAction',Object:{'@context':['http://schema4i.org/Thing.jsonld','http://schema4i.org/Filter','http://schema4i.org/DataLakeItem','http://schema4i.org/UserAccount'],'@type':'Filter',FilterItem:{'@type':'DataLakeItem',Creator:{'@type':'UserAccount',Identifier:accountId}}}})});const data=await response.json();console.log(data);setTransactions([]);setBalance(0);setErrorMessage('');}catch(error){console.error('Error clearing transactions:',error);}};const handleDeposit=async()=>{const newBalance=balance+parseFloat(amount);await storeTransaction({amount:parseFloat(amount),balance:newBalance,type:'Deposit',serial:transactions.length+1});setBalance(newBalance);setAmount(0);};const handleWithdraw=async()=>{if(amount>balance){setErrorMessage('Insufficient balance for withdrawal');return;}const newBalance=balance-parseFloat(amount);await storeTransaction({amount:parseFloat(amount),balance:newBalance,type:'Withdraw',serial:transactions.length+1});setBalance(newBalance);setAmount(0);};return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Transaction\"}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",value:amount,onChange:e=>setAmount(e.target.value),style:{marginRight:\"50px\"},class:\"form-control\",id:\"exampleInputEmail1\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"div\",{class:\"btn-group\",role:\"group\",\"aria-label\":\"Basic radio toggle button group\",className:\"button\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:handleDeposit,className:\"btn btn-outline-secondary\",style:{marginRight:\"10px\"},children:\"Deposit\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handleWithdraw,className:\"btn btn-outline-secondary\",style:{marginRight:\"10px\"},children:\"Withdraw\"}),/*#__PURE__*/_jsx(\"button\",{onClick:loadTransactions,className:\"btn btn-outline-secondary\",children:\"Transaction\"})]}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"h4\",{children:[\"Current Balance: $\",balance]}),errorMessage&&/*#__PURE__*/_jsx(\"p\",{style:{color:'red'},children:errorMessage}),/*#__PURE__*/_jsxs(\"table\",{className:\"table table-striped\",children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"No\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Type\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Amount\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Current Balance\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:transactions.map((transaction,index)=>/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:transaction.SerialNumber}),/*#__PURE__*/_jsx(\"td\",{children:transaction.Type}),/*#__PURE__*/_jsxs(\"td\",{children:[\"$\",transaction.Amount]}),/*#__PURE__*/_jsxs(\"td\",{children:[\"$\",transaction.Balance]})]},index))})]})]});}export default Transaction;","map":{"version":3,"names":["React","useState","useEffect","Table","jsx","_jsx","jsxs","_jsxs","url","headers","accountNumber","localStorage","getItem","accountId","Transaction","amount","setAmount","balance","setBalance","transactions","setTransactions","errorMessage","setErrorMessage","storeTransaction","transaction","response","fetch","method","body","JSON","stringify","Result","Name","Creator","Identifier","About","Amount","Balance","Type","type","SerialNumber","serial","data","json","console","log","loadTransactions","error","Object","FilterItem","result","ItemListElement","map","item","Item","sort","a","b","length","latestBalance","clearTransactions","handleDeposit","newBalance","parseFloat","handleWithdraw","className","children","value","onChange","e","target","style","marginRight","class","id","role","onClick","color","index"],"sources":["C:/Users/USER/Desktop/banking-app-hswl2/src/Transaction.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './tran.css';\r\nimport Table from 'react-bootstrap/Table';\r\n\r\nconst url = 'https://json-storage-api.p.rapidapi.com/datalake';\r\nconst headers = {\r\n  'Content-Type': 'application/json',\r\n  'X-RapidAPI-Key': '66d105c179msh9c5b82c1cf62460p15aa72jsn63c558e1dc1e',\r\n  'X-RapidAPI-Host': 'json-storage-api.p.rapidapi.com'\r\n};\r\n\r\nconst accountNumber = localStorage.getItem('accountNumber');\r\nconst accountId = 'USERID-4711'+accountNumber;\r\n\r\n\r\nfunction Transaction() {\r\n    const [amount, setAmount] = useState(0);\r\n    const [balance, setBalance] = useState(0);\r\n    const [transactions, setTransactions] = useState([]);\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n  \r\n  \r\n    const storeTransaction = async (transaction) => {\r\n      try {\r\n        const response = await fetch(url, {\r\n          method: 'POST',\r\n          headers,\r\n          body: JSON.stringify({\r\n            '@context': [\r\n              'http://schema4i.org/Thing.jsonld',\r\n              'http://schema4i.org/Action.jsonld',\r\n              'http://schema4i.org/CreateAction.jsonld'\r\n            ],\r\n            '@type': 'CreateAction',\r\n            Result: {\r\n              '@context': [\r\n                'http://schema4i.org/DataLakeItem.jsonld',\r\n                'http://schema4i.org/UserAccount.jsonld',\r\n                'http://schema4i.org/OfferForPurchase.jsonld',\r\n                'http://schema4i.org/Offer.jsonld',\r\n                'http://schema4i.org/Organization.jsonld',\r\n                'http://schema4i.org/PostalAddress.jsonld'\r\n              ],\r\n              '@type': 'DataLakeItem',\r\n              Name: 'Transaction',\r\n              Creator: {\r\n                '@type': 'UserAccount',\r\n                Identifier: accountId \r\n              },\r\n              About: {\r\n                '@type': 'Organization'\r\n              },\r\n              Amount: transaction.amount,\r\n              Balance: transaction.balance,\r\n              Type: transaction.type,\r\n              SerialNumber: transaction.serial \r\n            }\r\n          })\r\n        });\r\n  \r\n        const data = await response.json();\r\n        console.log(data);\r\n       \r\n        loadTransactions();\r\n      } catch (error) {\r\n        console.error('Error storing transaction:', error);\r\n      }\r\n    };\r\n  \r\n    const loadTransactions = async () => {\r\n      try {\r\n        const response = await fetch(url, {\r\n          method: 'POST',\r\n          headers,\r\n          body: JSON.stringify({\r\n            '@context': [\r\n              'http://schema4i.org/Thing.jsonld',\r\n              'http://schema4i.org/Action.jsonld',\r\n              'http://schema4i.org/SearchAction.jsonld'\r\n            ],\r\n            '@type': 'SearchAction',\r\n            Object: {\r\n              '@context': [\r\n                'http://schema4i.org/Thing.jsonld',\r\n                'http://schema4i.org/Filter',\r\n                'http://schema4i.org/DataLakeItem',\r\n                'http://schema4i.org/UserAccount'\r\n              ],\r\n              '@type': 'Filter',\r\n              FilterItem: {\r\n                '@type': 'DataLakeItem',\r\n                Creator: {\r\n                  '@type': 'UserAccount',\r\n                  Identifier: accountId \r\n                }\r\n              }\r\n            }\r\n          })\r\n        });\r\n  \r\n        const data = await response.json();\r\n        const result = data.Result.ItemListElement.map(item => item.Item);\r\n        \r\n        result.sort((a, b) => a.SerialNumber - b.SerialNumber);\r\n        setTransactions(result);\r\n        if (result.length > 0) {\r\n          \r\n          const latestBalance = result[result.length - 1].Balance;\r\n          setBalance(latestBalance);\r\n          if (latestBalance < 0) {\r\n            setErrorMessage('Insufficient balance for withdrawal');\r\n          } else {\r\n            setErrorMessage('');\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error loading transactions:', error);\r\n      }\r\n    };\r\n  \r\n    const clearTransactions = async () => {\r\n      try {\r\n        const response = await fetch(url, {\r\n          method: 'POST',\r\n          headers,\r\n          body: JSON.stringify({\r\n            '@context': [\r\n              'http://schema4i.org/Thing.jsonld',\r\n              'http://schema4i.org/Action.jsonld',\r\n              'http://schema4i.org/DeleteAction.jsonld'\r\n            ],\r\n            '@type': 'DeleteAction',\r\n            Object: {\r\n              '@context': [\r\n                'http://schema4i.org/Thing.jsonld',\r\n                'http://schema4i.org/Filter',\r\n                'http://schema4i.org/DataLakeItem',\r\n                'http://schema4i.org/UserAccount'\r\n              ],\r\n              '@type': 'Filter',\r\n              FilterItem: {\r\n                '@type': 'DataLakeItem',\r\n                Creator: {\r\n                  '@type': 'UserAccount',\r\n                  Identifier: accountId\r\n                }\r\n              }\r\n            }\r\n          })\r\n        });\r\n  \r\n        const data = await response.json();\r\n        console.log(data);\r\n        setTransactions([]);\r\n        setBalance(0);\r\n        setErrorMessage('');\r\n      } catch (error) {\r\n        console.error('Error clearing transactions:', error);\r\n      }\r\n    };\r\n  \r\n    const handleDeposit = async () => {\r\n      const newBalance = balance + parseFloat(amount);\r\n      await storeTransaction({ amount: parseFloat(amount), balance: newBalance, type: 'Deposit', serial: transactions.length + 1 });\r\n      setBalance(newBalance); \r\n      setAmount(0); \r\n    };\r\n    \r\n    const handleWithdraw = async () => {\r\n      if (amount > balance) {\r\n        setErrorMessage('Insufficient balance for withdrawal');\r\n        return;\r\n      }\r\n      const newBalance = balance - parseFloat(amount);\r\n      await storeTransaction({ amount: parseFloat(amount), balance: newBalance, type: 'Withdraw', serial: transactions.length + 1 });\r\n      setBalance(newBalance); \r\n      setAmount(0); \r\n    };\r\n  \r\n    return (\r\n         \r\n      <div className=\"App\">\r\n        \r\n        <h1 >Transaction</h1>\r\n        \r\n    \r\n         \r\n          <input\r\n            type=\"number\"\r\n            value={amount}\r\n            onChange={(e) => setAmount(e.target.value)}\r\n            style={{marginRight: \"50px\"}}\r\n            class=\"form-control\" id=\"exampleInputEmail1\"\r\n          />\r\n          <br></br>\r\n           <div class=\"btn-group\" role=\"group\" aria-label=\"Basic radio toggle button group\"  className='button'>\r\n          <button onClick={handleDeposit} className=\"btn btn-outline-secondary\" style={{marginRight: \"10px\"}}>Deposit</button>\r\n          <button onClick={handleWithdraw} className=\"btn btn-outline-secondary\" style={{marginRight: \"10px\"}}>Withdraw</button>\r\n          <button onClick={loadTransactions} className=\"btn btn-outline-secondary\" >Transaction</button>\r\n          </div>\r\n          <br></br>\r\n          <h4>Current Balance: ${balance}</h4>\r\n          {errorMessage && <p style={{ color: 'red' }}>{errorMessage}</p>}\r\n          <table className=\"table table-striped\">\r\n        <thead>\r\n        <tr>\r\n            <th>No</th>\r\n            <th>Type</th>\r\n            <th>Amount</th>\r\n            <th>Current Balance</th>\r\n        </tr>\r\n        </thead>\r\n        <tbody>\r\n        {transactions.map((transaction, index) => (\r\n            <tr key={index}>\r\n                <td>{transaction.SerialNumber}</td>\r\n                <td>{transaction.Type}</td>\r\n                <td>${transaction.Amount}</td>\r\n                <td>${transaction.Balance}</td>\r\n            </tr>\r\n            ))}\r\n        </tbody>\r\n        </table>\r\n        </div>\r\n\r\n\r\n\r\n    );\r\n  }\r\n  \r\n\r\nexport default Transaction;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}