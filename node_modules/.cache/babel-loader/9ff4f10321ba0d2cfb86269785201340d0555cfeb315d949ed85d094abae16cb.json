{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\bank\\\\banking-app-hsw\\\\src\\\\DataLake.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst url = 'https://json-storage-api.p.rapidapi.com/datalake';\nconst headers = {\n  'Content-Type': 'application/json',\n  'X-RapidAPI-Key': '66d105c179msh9c5b82c1cf62460p15aa72jsn63c558e1dc1e',\n  'X-RapidAPI-Host': 'json-storage-api.p.rapidapi.com'\n};\nconst accountId = 'USERID-4711';\nfunction DataLake() {\n  _s();\n  const [amount, setAmount] = useState(0);\n  const [balance, setBalance] = useState(0);\n  const [transactions, setTransactions] = useState([]);\n  const [errorMessage, setErrorMessage] = useState('');\n  useEffect(() => {\n    loadTransactions();\n  }, []);\n  const storeTransaction = async transaction => {\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers,\n        body: JSON.stringify({\n          '@context': ['http://schema4i.org/Thing.jsonld', 'http://schema4i.org/Action.jsonld', 'http://schema4i.org/CreateAction.jsonld'],\n          '@type': 'CreateAction',\n          Result: {\n            '@context': ['http://schema4i.org/DataLakeItem.jsonld', 'http://schema4i.org/UserAccount.jsonld', 'http://schema4i.org/OfferForPurchase.jsonld', 'http://schema4i.org/Offer.jsonld', 'http://schema4i.org/Organization.jsonld', 'http://schema4i.org/PostalAddress.jsonld'],\n            '@type': 'DataLakeItem',\n            Name: 'Transaction',\n            Creator: {\n              '@type': 'UserAccount',\n              Identifier: accountId\n            },\n            About: {\n              '@type': 'Organization'\n            },\n            Amount: transaction.amount,\n            Balance: transaction.balance,\n            Type: transaction.type,\n            SerialNumber: transaction.serial\n          }\n        })\n      });\n      const data = await response.json();\n      console.log(data);\n      loadTransactions();\n    } catch (error) {\n      console.error('Error storing transaction:', error);\n    }\n  };\n  const loadTransactions = async () => {\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers,\n        body: JSON.stringify({\n          '@context': ['http://schema4i.org/Thing.jsonld', 'http://schema4i.org/Action.jsonld', 'http://schema4i.org/SearchAction.jsonld'],\n          '@type': 'SearchAction',\n          Object: {\n            '@context': ['http://schema4i.org/Thing.jsonld', 'http://schema4i.org/Filter', 'http://schema4i.org/DataLakeItem', 'http://schema4i.org/UserAccount'],\n            '@type': 'Filter',\n            FilterItem: {\n              '@type': 'DataLakeItem',\n              Creator: {\n                '@type': 'UserAccount',\n                Identifier: accountId\n              }\n            }\n          }\n        })\n      });\n      const data = await response.json();\n      const result = data.Result.ItemListElement.map(item => item.Item);\n      result.sort((a, b) => a.SerialNumber - b.SerialNumber);\n      setTransactions(result);\n      if (result.length > 0) {\n        const latestBalance = result[result.length - 1].Balance;\n        setBalance(latestBalance);\n        if (latestBalance < 0) {\n          setErrorMessage('Insufficient balance for withdrawal');\n        } else {\n          setErrorMessage('');\n        }\n      }\n    } catch (error) {\n      console.error('Error loading transactions:', error);\n    }\n  };\n  const clearTransactions = async () => {\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers,\n        body: JSON.stringify({\n          '@context': ['http://schema4i.org/Thing.jsonld', 'http://schema4i.org/Action.jsonld', 'http://schema4i.org/DeleteAction.jsonld'],\n          '@type': 'DeleteAction',\n          Object: {\n            '@context': ['http://schema4i.org/Thing.jsonld', 'http://schema4i.org/Filter', 'http://schema4i.org/DataLakeItem', 'http://schema4i.org/UserAccount'],\n            '@type': 'Filter',\n            FilterItem: {\n              '@type': 'DataLakeItem',\n              Creator: {\n                '@type': 'UserAccount',\n                Identifier: accountId\n              }\n            }\n          }\n        })\n      });\n      const data = await response.json();\n      console.log(data);\n      setTransactions([]);\n      setBalance(0);\n      setErrorMessage('');\n    } catch (error) {\n      console.error('Error clearing transactions:', error);\n    }\n  };\n  const handleDeposit = async () => {\n    const newBalance = balance + parseFloat(amount);\n    await storeTransaction({\n      amount: parseFloat(amount),\n      balance: newBalance,\n      type: 'Deposit',\n      serial: transactions.length + 1\n    });\n    setBalance(newBalance);\n    setAmount(0);\n    loadTransactions();\n  };\n  const handleWithdraw = async () => {\n    if (amount > balance) {\n      setErrorMessage('Insufficient balance for withdrawal');\n      return;\n    }\n    const newBalance = balance - parseFloat(amount);\n    await storeTransaction({\n      amount: parseFloat(amount),\n      balance: newBalance,\n      type: 'Withdraw',\n      serial: transactions.length + 1\n    });\n    setBalance(newBalance);\n    setAmount(0);\n    loadTransactions();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Transaction App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: amount,\n        onChange: e => setAmount(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleDeposit,\n        children: \"Deposit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleWithdraw,\n        children: \"Withdraw\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Current Balance: $\", balance]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'red'\n        },\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 26\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 5\n  }, this);\n}\n_s(DataLake, \"xsvTuqR1Gg5n7WoBORmMMWSpAXQ=\");\n_c = DataLake;\nexport default DataLake;\nvar _c;\n$RefreshReg$(_c, \"DataLake\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","url","headers","accountId","DataLake","_s","amount","setAmount","balance","setBalance","transactions","setTransactions","errorMessage","setErrorMessage","loadTransactions","storeTransaction","transaction","response","fetch","method","body","JSON","stringify","Result","Name","Creator","Identifier","About","Amount","Balance","Type","type","SerialNumber","serial","data","json","console","log","error","Object","FilterItem","result","ItemListElement","map","item","Item","sort","a","b","length","latestBalance","clearTransactions","handleDeposit","newBalance","parseFloat","handleWithdraw","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","onClick","style","color","_c","$RefreshReg$"],"sources":["C:/Users/USER/bank/banking-app-hsw/src/DataLake.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst url = 'https://json-storage-api.p.rapidapi.com/datalake';\r\nconst headers = {\r\n  'Content-Type': 'application/json',\r\n  'X-RapidAPI-Key': '66d105c179msh9c5b82c1cf62460p15aa72jsn63c558e1dc1e',\r\n  'X-RapidAPI-Host': 'json-storage-api.p.rapidapi.com'\r\n};\r\n\r\n\r\nconst accountId = 'USERID-4711';\r\n\r\nfunction DataLake() {\r\n  const [amount, setAmount] = useState(0);\r\n  const [balance, setBalance] = useState(0);\r\n  const [transactions, setTransactions] = useState([]);\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n\r\n  useEffect(() => {\r\n    loadTransactions();\r\n  }, []);\r\n\r\n  const storeTransaction = async (transaction) => {\r\n    try {\r\n      const response = await fetch(url, {\r\n        method: 'POST',\r\n        headers,\r\n        body: JSON.stringify({\r\n          '@context': [\r\n            'http://schema4i.org/Thing.jsonld',\r\n            'http://schema4i.org/Action.jsonld',\r\n            'http://schema4i.org/CreateAction.jsonld'\r\n          ],\r\n          '@type': 'CreateAction',\r\n          Result: {\r\n            '@context': [\r\n              'http://schema4i.org/DataLakeItem.jsonld',\r\n              'http://schema4i.org/UserAccount.jsonld',\r\n              'http://schema4i.org/OfferForPurchase.jsonld',\r\n              'http://schema4i.org/Offer.jsonld',\r\n              'http://schema4i.org/Organization.jsonld',\r\n              'http://schema4i.org/PostalAddress.jsonld'\r\n            ],\r\n            '@type': 'DataLakeItem',\r\n            Name: 'Transaction',\r\n            Creator: {\r\n              '@type': 'UserAccount',\r\n              Identifier: accountId \r\n            },\r\n            About: {\r\n              '@type': 'Organization'\r\n            },\r\n            Amount: transaction.amount,\r\n            Balance: transaction.balance,\r\n            Type: transaction.type,\r\n            SerialNumber: transaction.serial \r\n          }\r\n        })\r\n      });\r\n\r\n      const data = await response.json();\r\n      console.log(data);\r\n      loadTransactions();\r\n    } catch (error) {\r\n      console.error('Error storing transaction:', error);\r\n    }\r\n  };\r\n\r\n  const loadTransactions = async () => {\r\n    try {\r\n      const response = await fetch(url, {\r\n        method: 'POST',\r\n        headers,\r\n        body: JSON.stringify({\r\n          '@context': [\r\n            'http://schema4i.org/Thing.jsonld',\r\n            'http://schema4i.org/Action.jsonld',\r\n            'http://schema4i.org/SearchAction.jsonld'\r\n          ],\r\n          '@type': 'SearchAction',\r\n          Object: {\r\n            '@context': [\r\n              'http://schema4i.org/Thing.jsonld',\r\n              'http://schema4i.org/Filter',\r\n              'http://schema4i.org/DataLakeItem',\r\n              'http://schema4i.org/UserAccount'\r\n            ],\r\n            '@type': 'Filter',\r\n            FilterItem: {\r\n              '@type': 'DataLakeItem',\r\n              Creator: {\r\n                '@type': 'UserAccount',\r\n                Identifier: accountId \r\n              }\r\n            }\r\n          }\r\n        })\r\n      });\r\n\r\n      const data = await response.json();\r\n      const result = data.Result.ItemListElement.map(item => item.Item);\r\n      \r\n      result.sort((a, b) => a.SerialNumber - b.SerialNumber);\r\n      setTransactions(result);\r\n      if (result.length > 0) {\r\n       \r\n        const latestBalance = result[result.length - 1].Balance;\r\n        setBalance(latestBalance);\r\n        if (latestBalance < 0) {\r\n          setErrorMessage('Insufficient balance for withdrawal');\r\n        } else {\r\n          setErrorMessage('');\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading transactions:', error);\r\n    }\r\n  };\r\n\r\n  const clearTransactions = async () => {\r\n    try {\r\n      const response = await fetch(url, {\r\n        method: 'POST',\r\n        headers,\r\n        body: JSON.stringify({\r\n          '@context': [\r\n            'http://schema4i.org/Thing.jsonld',\r\n            'http://schema4i.org/Action.jsonld',\r\n            'http://schema4i.org/DeleteAction.jsonld'\r\n          ],\r\n          '@type': 'DeleteAction',\r\n          Object: {\r\n            '@context': [\r\n              'http://schema4i.org/Thing.jsonld',\r\n              'http://schema4i.org/Filter',\r\n              'http://schema4i.org/DataLakeItem',\r\n              'http://schema4i.org/UserAccount'\r\n            ],\r\n            '@type': 'Filter',\r\n            FilterItem: {\r\n              '@type': 'DataLakeItem',\r\n              Creator: {\r\n                '@type': 'UserAccount',\r\n                Identifier: accountId \r\n              }\r\n            }\r\n          }\r\n        })\r\n      });\r\n\r\n      const data = await response.json();\r\n      console.log(data);\r\n      setTransactions([]);\r\n      setBalance(0);\r\n      setErrorMessage('');\r\n    } catch (error) {\r\n      console.error('Error clearing transactions:', error);\r\n    }\r\n  };\r\n\r\n  const handleDeposit = async () => {\r\n    const newBalance = balance + parseFloat(amount);\r\n    await storeTransaction({ amount: parseFloat(amount), balance: newBalance, type: 'Deposit', serial: transactions.length + 1 });\r\n    setBalance(newBalance);\r\n    setAmount(0); \r\n    loadTransactions(); \r\n  };\r\n  \r\n  const handleWithdraw = async () => {\r\n    if (amount > balance) {\r\n      setErrorMessage('Insufficient balance for withdrawal');\r\n      return;\r\n    }\r\n    const newBalance = balance - parseFloat(amount);\r\n    await storeTransaction({ amount: parseFloat(amount), balance: newBalance, type: 'Withdraw', serial: transactions.length + 1 });\r\n    setBalance(newBalance); \r\n    setAmount(0);\r\n    loadTransactions(); \r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Transaction App</h1>\r\n      <div>\r\n        <input\r\n          type=\"number\"\r\n          value={amount}\r\n          onChange={(e) => setAmount(e.target.value)}\r\n        />\r\n        <button onClick={handleDeposit}>Deposit</button>\r\n        <button onClick={handleWithdraw}>Withdraw</button>\r\n      </div>\r\n      <div>\r\n        <h2>Current Balance: ${balance}</h2>\r\n        {errorMessage && <p style={{ color: 'red' }}>{errorMessage}</p>}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DataLake;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}